openapi: '3.0'
info:
  title: VDJServer API
  version: '2.0.0'
  contact:
    name: VDJServer
    url: 'https://vdjserver.org/'
    email: vdjserver@utsouthwestern.edu
  description: >
    API service for the VDJServer analysis portal.

servers:
  - url: https://vdjserver.org/api/v2
    description: Production server
    variables:
      basePath:
        default: /api/v2
  - url: https://vdj-staging.tacc.utexas.edu/api/v2
    description: Staging server
    variables:
      basePath:
        default: /api/v2

components:
  schemas:
    Project:
      description: VDJServer project which is an extension of the AIRR Study object.
      discriminator:
        propertyName: VDJServer
      allOf:
        - $ref: '#/components/schemas/Study'
        - type: object
          properties:
            owner:
              description: Username that owns the project.
              type: string

    ProjectMetadata:
      description: Tapis metadata object for a project.
      discriminator:
        propertyName: VDJServer
      properties:
        uuid:
          type: string
          description: metadata identifier
        value:
          $ref: '#/components/schemas/Project'

    Test:
      description: Test object
      discriminator:
        propertyName: VDJServer
      type: object
      properties:
        owner:
          description: Username that owns the project.
          type: string
          nullable: true

  securitySchemes:
    user_authorization:
      type: http
      scheme: bearer
    project_authorization:
      type: apiKey
      name: project_id
      in: query
    metadata_authorization:
      type: http
      scheme: bearer
    publish_authorization:
      type: http
      scheme: bearer


paths:
  /:
    get:
      description: |
        Service heartbeat.
      operationId: getStatus
      responses:
        '200':
          description: |
            Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string

  /token:
    post:
      description: create token
      operationId: createToken
      tags:
        - authentication
      requestBody:
        content:
          'application/json':
            schema:
              properties:
                username: 
                  type: string
                password: 
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        '401':
          description: Not authorized.
          content: 
            'application/json': {}

    put:
      description: refresh token
      operationId: refreshToken
      tags:
        - authentication
      requestBody:
        content:
          'application/json':
            schema:
              properties:
                username:
                  type: string
                refresh_token:
                  type: string
              required:
                - username
                - refresh_token
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        '401':
          description: Not authorized.
          content: 
            'application/json': {}

  /project:
    post:
      description: create project
      operationId: createProject
      tags:
        - project
      security:
        - user_authorization: []
      requestBody:
        content:
          'application/json':
            schema:
              required:
                - project
              properties:
                project:
                  $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  result:
                    $ref: '#/components/schemas/ProjectMetadata'
        '400':
          description: Bad request.
        '401':
          description: Not authorized.
        '500':
          description: Internal service error occurred.
